{"version":3,"sources":["firebaseConfig.js","utils/firebase.js","components/main/Styled.js","components/main/MainComponent.js","components/main/index.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firebase","initializeApp","firebaseConfig","firestore","Wrapper","styled","div","Title","h3","Comment","textarea","RatingList","Rate","active","ButtonList","MainComponent","useState","isLoading","setIsLoading","currentRate","setCurrentRate","showComment","setShowComment","currentComment","setCurrentComment","isDone","setIsDone","isClosed","setIsClosed","queryString","parse","window","location","search","event_name","user_email","user_type","handleClose","Button","variant","onClick","Grid","className","container","spacing","alignItems","item","xs","sm","map","num","handleRateClick","placeholder","onChange","e","value","target","trim","handleCommentChange","color","data","comments","rating","collection","add","created","FieldValue","serverTimestamp","then","catch","console","log","disabled","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.204be0ef.chunk.js","sourcesContent":["export const config = {\n  apiKey: 'AIzaSyC4daB3XCodwl23aO2NIQWgGxhs2ieT3ss',\n  authDomain: 'nps-webapp-d08da.firebaseapp.com',\n  databaseURL: 'https://nps-webapp-d08da.firebaseio.com',\n  projectId: 'nps-webapp-d08da',\n  storageBucket: 'nps-webapp-d08da.appspot.com',\n  messagingSenderId: '103154630697',\n  appId: '1:103154630697:web:4bd6b10dcf205a44185c38',\n  measurementId: 'G-2973GPZ4KM',\n};\n\nexport default config;\n","import firebase from 'firebase';\nimport firebaseConfig from '../firebaseConfig';\n\nconst app = firebase.initializeApp(firebaseConfig);\nconst db = app.firestore();\n\nexport const addData = (data) => {\n  return db.collection('satisfaction_data').add({\n    created: firebase.firestore.FieldValue.serverTimestamp(),\n    ...data,\n  });\n};\n\nexport default {};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  padding: 16px 32px 16px 16px;\n  background: #f2f2f2;\n  .list {\n    margin: 16px 0;\n  }\n`;\n\nexport const Title = styled.h3`\n  margin: 0;\n`;\n\nexport const Comment = styled.textarea`\n  width: 100%;\n  height: 150px;\n  resize: none;\n`;\n\nexport const RatingList = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const Rate = styled.div`\n  color: ${({ active }) => (active ? '#EFAD04' : '#ddd')};\n  cursor: pointer;\n  margin: 0 8px;\n  font-size: 20px;\n  user-select: none;\n  &:hover {\n    color: ${({ active }) => (active ? '#EFAD04' : '#d4d4d4')};\n  }\n`;\n\nexport const ButtonList = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 16px;\n\n  button {\n    margin: 0 8px;\n  }\n`;\n","import React, { useState } from 'react';\nimport queryString from 'query-string';\nimport { Button } from '@material-ui/core';\nimport { addData } from '../../utils/firebase';\nimport Grid from '@material-ui/core/Grid';\nimport {\n  Wrapper,\n  Title,\n  Rate,\n  Comment,\n  RatingList,\n  ButtonList,\n} from './Styled';\n\nfunction MainComponent() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentRate, setCurrentRate] = useState(0);\n  const [showComment, setShowComment] = useState(false);\n  const [currentComment, setCurrentComment] = useState('');\n  const [isDone, setIsDone] = useState(false);\n  const [isClosed, setIsClosed] = useState(false);\n  const {\n    event_name = 'init event',\n    user_email = 'init email',\n    user_type = 'init type',\n  } = queryString.parse(window.location.search);\n\n  function testClick() {\n    setIsLoading(true);\n\n    const parameters = {\n      comments: showComment ? currentComment : '',\n      event_name,\n      rating: currentRate,\n      user_email,\n      user_type,\n    };\n\n    addData(parameters)\n      .then(() => {\n        setIsLoading(false);\n        setIsDone(true);\n        initStates();\n      })\n      .catch((e) => {\n        console.log('error', e);\n        setIsLoading(false);\n      });\n  }\n\n  function handleRateClick(num) {\n    if (num === currentRate) {\n      setCurrentRate(0);\n    } else {\n      setCurrentRate(num);\n    }\n  }\n\n  function handleCommentChange({ target }) {\n    const { value } = target;\n    setCurrentComment(value.trim());\n  }\n\n  function initStates() {\n    setCurrentRate(0);\n    setShowComment(false);\n    setCurrentComment('');\n  }\n\n  function handleClose() {\n    setIsClosed(true);\n  }\n\n  if (isClosed) {\n    return null;\n  }\n\n  if (isDone) {\n    return (\n      <Wrapper>\n        <Title>Thanks!</Title>\n        <ButtonList>\n          <Button variant=\"contained\" onClick={() => handleClose(true)}>\n            Close\n          </Button>\n        </ButtonList>\n      </Wrapper>\n    );\n  }\n\n  return (\n    <Wrapper>\n      {/* rating */}\n      <Grid className=\"list\" container spacing={1} alignItems=\"center\">\n        <Grid item xs={12} sm={6}>\n          <Title>Do you like this ?</Title>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <RatingList>\n            {[1, 2, 3, 4, 5].map((num) => (\n              <Rate\n                active={currentRate >= num}\n                onClick={() => handleRateClick(num)}\n              >\n                â˜…\n              </Rate>\n            ))}\n          </RatingList>\n        </Grid>\n      </Grid>\n      {/* comment */}\n      {showComment && (\n        <Grid className=\"list\" container spacing={1}>\n          <Grid item xs={12} sm={6}>\n            <Title>Comment or Message</Title>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Comment\n              className=\"comment\"\n              placeholder=\"Enter your comment here...\"\n              onChange={(e) => handleCommentChange(e)}\n            />\n          </Grid>\n        </Grid>\n      )}\n      <ButtonList>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => handleClose(true)}\n        >\n          No, Thanks!\n        </Button>\n        {!showComment && (\n          <Button variant=\"contained\" onClick={() => setShowComment(true)}>\n            Add comment\n          </Button>\n        )}\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={testClick}\n          disabled={isLoading}\n        >\n          Send\n        </Button>\n      </ButtonList>\n    </Wrapper>\n  );\n}\n\nexport default MainComponent;\n","import MainComponent from './MainComponent';\n\nexport default MainComponent;\n","import React from 'react';\nimport Main from './components/main';\n\nfunction App() {\n  return (\n    <div>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}